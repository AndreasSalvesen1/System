return {
	"lervag/vimtex",
	lazy = false,
	init = function()
		local function launch_termpdf_viewer()
			local pdf_file = vim.fn.expand("%:p:r") .. ".pdf"
			local pdf_dir = vim.fn.expand("%:p:h")
			local kitty_socket = os.getenv("KITTY_LISTEN_ON")

			if not kitty_socket then
				print("Error: KITTY_LISTEN_ON is not set.")
				return
			end

			local python_path = "/home/andreas/.venvs/termpdf/bin/python"
			local termpdf_path = "/home/andreas/termpdf.py/termpdf.py"

			local shell_command = string.format(
				"'%s' '%s' '%s' 2>/dev/null || (echo [ERROR] && sleep 5)",
				python_path,
				termpdf_path,
				pdf_file
			)
			-- 1. Lukk forrige termpdf-vindu
			vim.fn.jobstart({
				"kitty",
				"@",
				"--to",
				kitty_socket,
				"close-window",
				"--match",
				"title:termpdf",
			}, { detach = true })

			-- 2. Layout (valgfritt)
			vim.fn.jobstart({
				"kitty",
				"@",
				"--to",
				kitty_socket,
				"set-layout",
				"vertical",
			}, { detach = true })

			-- 3. Start nytt viewer-vindu uten Ã¥ ta fokus
			vim.fn.jobstart({
				"kitty",
				"@",
				"--to",
				kitty_socket,
				"launch",
				"--location=vsplit",
				"--title=termpdf",
				"--dont-take-focus",
				"bash",
				"-c",
				shell_command,
			}, {
				cwd = pdf_dir,
				detach = true,
			})
		end

		local function close_termpdf_viewer()
			local kitty_socket = os.getenv("KITTY_LISTEN_ON")
			if not kitty_socket then
				return
			end

			vim.fn.jobstart({
				"kitty",
				"@",
				"--to",
				kitty_socket,
				"close-window",
				"--match",
				"title:termpdf",
			}, { detach = true })
		end

		vim.api.nvim_create_autocmd("User", {
			pattern = "VimtexEventCompileSuccess",
			callback = function()
				launch_termpdf_viewer()

				-- Clean up auxiliary files generated by LaTeX
				vim.fn.jobstart({ "latexmk", "-c" }, { detach = true })

				-- Also delete the .synctex.gz file manually
				local synctex = vim.fn.expand("%:r") .. ".synctex.gz"
				if vim.fn.filereadable(synctex) == 1 then
					vim.fn.delete(synctex)
				end
			end,
		})

		local synctex = vim.fn.expand("%:r") .. ".synctex.gz"
		local target = "aux/" .. vim.fn.fnamemodify(synctex, ":t")
		if vim.fn.filereadable(synctex) == 1 then
			vim.fn.rename(synctex, target)
		end

		vim.api.nvim_create_autocmd("BufRead", {
			pattern = "*.tex",
			callback = launch_termpdf_viewer,
		})

		vim.api.nvim_create_autocmd("BufDelete", {
			pattern = "*.tex",
			callback = close_termpdf_viewer,
		})

		vim.api.nvim_create_autocmd("VimLeavePre", {
			callback = close_termpdf_viewer,
		})

		vim.g.vimtex_view_method = "general"
		vim.g.vimtex_view_general_viewer = "true"
		vim.g.vimtex_view_automatic = 0
		vim.g.vimtex_view_forward_search_on_start = 0
		vim.g.vimtex_compiler_method = "latexmk"
		vim.g.vimtex_view_general_options = "termpdf.py --invert -"
		vim.g.vimtex_quickfix_mode = 0
		vim.g.vimtex_compiler_method_latexmk = {
			build_dir = "build",
			callback = function()
				vim.fn.jobstart({
					"-pdf",
					"-interaction=nonstopmode",
					"-synctex=1",
				})
			end,
		}
	end,
}
